* Custom functions
** system functions
   #+BEGIN_SRC emacs-lisp
     (defun server-shutdown ()
       "Save buffers, Quit, and Shutdown (kill) server"
       (interactive)
       (save-some-buffers)
       (kill-emacs))

     (defun load-if-exists (file)
       "load the elisp file only if it exists and is readable"
       (if (file-readable-p file)
           (load-file file)))
  #+END_SRC

** window functions
   #+BEGIN_SRC emacs-lisp
     (defun split-and-follow-horizontally ()
       (interactive)
       (split-window-below)
       (balance-windows)
       (other-window 1))

     (defun split-and-follow-vertically ()
       (interactive)
       (split-window-right)
       (balance-windows)
       (other-window 1))
  #+END_SRC

** editing functions
   #+BEGIN_SRC emacs-lisp
     (defun kill-whole-word ()
       (interactive)
       (backward-word)
       (kill-word 1))

     (defun copy-whole-line ()
       (interactive)
       (save-excursion
         (kill-new
          (buffer-substring
           (point-at-bol)
           (point-at-eol)))))

     (defun kill-curr-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))

     (defun switch-to-scratch ()
       "Switch to scratch buffer"
       (interactive)
       (switch-to-buffer "*scratch*"))
  #+END_SRC

** programming functions
*** c/c++ functions
   #+BEGIN_SRC emacs-lisp
     (defun linux-kernel-coding-style/c-lineup-arglist-tabs-only (ignored)
       "Line up argument lists by tabs, not spaces"
       (let* ((anchor (c-langelem-pos c-syntactic-element))
              (column (c-langelem-2nd-pos c-syntactic-element))
              (offset (- (1+ column) anchor))
              (steps (floor offset c-basic-offset)))
         (* (max steps 1)
            c-basic-offset)))

     (defun linux-kernel-coding-style/setup ()
       (let ((filename (buffer-file-name)))
         ;; Enable kernel mode for the appropriate files
         (when (and filename
                    (string-match (expand-file-name "~/kernel")
                                            filename))
           (setq indent-tabs-mode t)
           (setq show-trailing-whitespace t)
           (setq tab-width 8)
           (setq c-basic-offset 8)
           (c-set-style "linux-kernel")
           (message "Setting up indentation for the linux kernel"))))

     (defun my-c-mode-config ()
       "For use in `c-mode-hook'."
       (define-key c-mode-map (kbd "M-.") 'helm-gtags-dwim)
       (define-key c-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
       (unbind-key "\C-t" helm-gtags-mode-map)
       (define-key c-mode-map (kbd "C-t") 'ff-find-related-file)
       )

     (defun my-c++-mode-config ()
       "For use in `c++-mode-hook'."
       (define-key c++-mode-map (kbd "M-,") 'xref-pop-marker-stack)
       (define-key c++-mode-map (kbd "M-.") 'xref-find-definitions)
       (unbind-key "\C-t" helm-gtags-mode-map)
       (define-key c++-mode-map (kbd "C-t") 'ff-find-related-file)
       (setq flycheck-gcc-language-standard "c++17")
       (setq flycheck-clang-language-standard "c++17")
       )
   #+END_SRC

* packages for systems
** vterm
   #+BEGIN_SRC emacs-lisp
     (use-package vterm
       :ensure t
       :pin melpa
       :bind (:map vterm-mode-map ("C-y" . vterm-yank))
       :config (setq vterm-max-scrollback 100000)
       )
     (use-package multi-vterm
       :ensure t
       :init
       (bind-key "C-c t c" 'multi-vterm)
       (bind-key "C-c t t" 'multi-vterm-dedicated-toggle)
       (bind-key "C-c t n" 'multi-vterm-next)
       ;; there should be a way to escape and go back to other screen w/ elscreen
       (bind-key "C-c t z" 'elscreen-select-and-goto)
       )
   #+END_SRC

* packages for editing
** avy
   #+BEGIN_SRC  emacs-lisp
     (use-package avy
       :ensure t
       :bind (("C-;" . avy-goto-char)))
   #+END_SRC

** company
   set company-idle-delay slows down emacs
   #+BEGIN_SRC  emacs-lisp
     (use-package company
       :ensure t
       :custom
       (company-idle-delay 0.5) ;; how long to wait until popup
       :config
       (setq company-minimum-prefix-length 1)
       (global-company-mode t))
   #+END_SRC

** company-quickhelp
   set company-quickhelp-idle-delay slows down emacs
   #+BEGIN_SRC  emacs-lisp
     (use-package company-quickhelp
         :ensure t
         :config
         (company-quickhelp-mode))
   #+END_SRC

** yasnippet
   yasnippet for code completion
   #+BEGIN_SRC  emacs-lisp
     (use-package yasnippet
       :ensure
       :config
       (yas-reload-all)
       (add-hook 'prog-mode-hook 'yas-minor-mode)
       (add-hook 'text-mode-hook 'yas-minor-mode))
   #+END_SRC

** expand-region
   #+BEGIN_SRC  emacs-lisp
     (use-package expand-region
       :ensure t
       :init
       (bind-key "C-=" 'er/expand-region)
       )
   #+END_SRC

** highlight-parentheses
   #+BEGIN_SRC  emacs-lisp
     (use-package highlight-parentheses
       :ensure t
       :init
       (setq global-highlight-parentheses-mode t)
       )
   #+END_SRC

** multiple-cursors
   #+BEGIN_SRC  emacs-lisp
     (use-package multiple-cursors
       :ensure t)
   #+END_SRC

** origami
   #+BEGIN_SRC  emacs-lisp
     (use-package origami
       :ensure t
       :config (global-origami-mode)
       :bind (("M-f" . origami-recursively-toggle-node)))
   #+END_SRC

** symbol-overlay
   #+BEGIN_SRC  emacs-lisp
     (use-package symbol-overlay
       :ensure t
       :bind (("M-n" . symbol-overlay-jump-next)
              ("M-p" . symbol-overlay-jump-prev)
              ("M-s" . symbol-overlay-put)
              ))
   #+END_SRC

** undo-tree
   C-x u : visualize undo/redo tree
   #+BEGIN_SRC  emacs-lisp
     (use-package undo-tree
       :ensure t
       :init
       (global-undo-tree-mode)
       :config
       (unbind-key "C-/" undo-tree-map)
       (setq
        undo-tree-auto-save-history t
        undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
       )
   #+END_SRC

** ws-butler
   #+BEGIN_SRC  emacs-lisp
     (use-package ws-butler
       :ensure t
       :init
       (add-hook 'prog-mode-hook #'ws-butler-mode)
     )
   #+END_SRC

** tree sitter
   #+BEGIN_SRC  emacs-lisp
     (use-package tree-sitter
       :ensure t
       :init
       (global-tree-sitter-mode)
       (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
       )
     (use-package tree-sitter-langs
       :ensure t
       :after tree-sitter
     )
   #+END_SRC

* package for windows/buffers
** ample-theme
   #+BEGIN_SRC  emacs-lisp
     (use-package ample-theme
       :ensure t
       :config
       (load-theme 'ample t)
       )
   #+END_SRC

** buffer-move
   #+BEGIN_SRC  emacs-lisp
     (use-package buffer-move
       :ensure t
       :bind (("<C-S-up>" . buf-move-up)
              ("<C-S-down>" . buf-move-down)
              ("<C-S-left>" . buf-move-left)
              ("<C-S-right>" . buf-move-right)
              ))
   #+END_SRC

** diminish
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t
       :config
       (diminish 'abbrev-mode)
       (diminish 'ace-isearch-mode)
       (diminish 'auto-fill-function)
       (diminish 'flycheck-mode)
       (diminish 'helm-mode)
       (diminish 'highlight-parentheses-mode)
       (diminish 'hl-line-mode)
       (diminish 'hs-minor-mode)
       (diminish 'hungry-delete-mode)
       (diminish 'linum-relative-mode)
       (diminish 'modern-c++-font-lock-mode)
       (diminish 'p4-mode)
       (diminish 'page-break-lines-mode)
       (diminish 'projectile-mode)
       (diminish 'recently-mode)
       (diminish 'undo-tree-mode)
       (diminish 'visual-line-mode)
       (diminish 'volatile-highlights-mode)
       (diminish 'which-key-mode)
       (diminish 'whitespace-mode)
       )
   #+END_SRC

** elscreen
   #+BEGIN_SRC  emacs-lisp
     (use-package elscreen
       :ensure t
       :init
       (elscreen-start))
   #+END_SRC

** linum-relative
   #+BEGIN_SRC emacs-lisp
     (use-package linum-relative
       :ensure t
       :config
         (setq linum-relative-current-symbol "")
         (add-hook 'prog-mode-hook 'linum-relative-mode))
   #+END_SRC

** volatile-highlights
   #+BEGIN_SRC emacs-lisp
     (use-package volatile-highlights
       :ensure t
       :config
       (volatile-highlights-mode t))
   #+END_SRC

** zoom-window
   #+BEGIN_SRC  emacs-lisp
     (use-package zoom-window
       :ensure t
       :init
       (setq zoom-window-mode-line-color "DarkGreen")
       :bind (("C-x C-z" . zoom-window-zoom))
       )
   #+END_SRC

* helm packages
** helm
   #+BEGIN_SRC  emacs-lisp
     (use-package helm
       :ensure t
       :bind (("C-c h" . helm-command-prefix)
              ("C-x f" . helm-find-files)
              ("M-x" . helm-M-x)
              ("M-y" . helm-show-kill-ring)
              :map helm-map
              ("<tab>" . helm-execute-persistent-action )
              ("C-i" . helm-execute-persistent-action)
              ("C-z" . helm-select-action))
       :init (setq
              helm-M-x-fuzzy-match        t
              helm-buffers-fuzzy-matching t
              helm-recentf-fuzzy-match    t
              helm-semantic-fuzzy-match   t
              helm-imenu-fuzzy-match      t
              helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
              helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
              helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
              helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
              helm-ff-file-name-history-use-recentf t)
       ;:config 
       ;(require 'helm-config)
       )
   #+END_SRC

** helm-ag
   #+BEGIN_SRC  emacs-lisp
     (use-package helm-ag
       :ensure t
       )
   #+END_SRC

** helm-bm
   #+BEGIN_SRC  emacs-lisp
     (use-package helm-bm
       :ensure t
       :bind (("C-c b" . helm-bm)))
   #+END_SRC

** helm-company
   #+BEGIN_SRC  emacs-lisp
          (use-package helm-company
            :ensure t
            :bind (
                   :map company-mode-map
                   ("C-/" . helm-company)
                   :map company-active-map 
                   ("C-/" . helm-company)
                   )
            )
   #+END_SRC

** helm-projectile
   #+BEGIN_SRC  emacs-lisp
     (use-package helm-projectile
       :ensure t
       :bind (("C-x C-b" . helm-projectile-switch-to-buffer))
       :config
       (helm-projectile-on))
   #+END_SRC

** helm-swoop
   #+BEGIN_SRC  emacs-lisp
     (use-package helm-swoop
       :ensure t
       :bind (("M-i" . helm-swoop)
              ("M-S-i"  . helm-swoop-back-to-last-point)
              ("C-c M-i" . helm-multi-swoop)
              ("C-x M-i" . helm-multi-swoop-all)
              :map isearch-mode-map
              ("M-i" . helm-swoop-from-isearch)
              :map helm-swoop-map
              ("M-i" . helm-multi-swoop-all-from-helm-swoop)
              ("M-m" . helm-multi-swoop-current-mode-from-helm-swoop)
              ("C-r" . helm-previous-line)
              ("C-s" . helm-next-line)
              :map helm-multi-swoop-map
              ("C-r" . helm-previous-line)
              ("C-s" . helm-next-line)
              )
       :init
       (setq
        ;; Save buffer when helm-multi-swoop-edit complete
        helm-multi-swoop-edit-save t

        ;; If this value is t, split window inside the current window
        helm-swoop-split-with-multiple-windows nil

        ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
        helm-swoop-split-direction 'split-window-vertically

        ;; If nil, you can slightly boost invoke speed in exchange for text color
        helm-swoop-speed-or-color nil

        ;; Go to the opposite side of line from the end or beginning of line
        helm-swoop-move-to-line-cycle t

        ;; Optional face for line numbers
        ;; Face name is `helm-swoop-line-number-face`
        helm-swoop-use-line-number-face t)
       :config (helm-mode))
   #+END_SRC

* special packages
** dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       ;;(defun dashboard-insert-custom ()
       ;;  (insert "Dired"))
       ;;(add-to-list 'dashboard-item-generators  '(custom . dashboard-insert-custom))
       ;;(add-to-list 'dashboard-items '(custom) t)
       (setq dashboard-items '((recents  . 30)
                               (projects . 3)
                               (bookmarks . 5)
                               (registers . 5)
                               (agenda . 5)))
       (setq dashboard-banner-logo-title "Hello Yonghyun")
       (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
       )
   #+END_SRC

** deft
   #+BEGIN_SRC emacs-lisp
     (use-package deft
       :ensure t
       :bind (("C-c d" . deft))
       :commands (deft)
       :config
       (setq deft-extensions '("org" "txt"))
       (setq deft-default-extension "txt")
       (setq deft-directory "~/Documents")
       (setq deft-text-mode 'org-mode)
       (setq deft-use-filename-as-title t)
       (setq deft-use-filter-string-for-filename t)
       (setq deft-auto-save-interval 0)
       (setq deft-org-mode-title-prefix t)
       (setq deft-file-naming-rules
             '((noslash . "_")
               (nospace . "_")
               (case-fn . downcase)))
       ;;(setq deft-recursive t)
       )
   #+END_SRC

** misc packages

*** bookmark manager
    #+BEGIN_SRC  emacs-lisp
      (use-package bm
        :ensure t
        :init
        ;; restore on load (even before you require bm)
        (setq bm-restore-repository-on-load t)

        :config
        ;; where to store persistant files
        (setq bm-repository-file "~/.emacs.d/bm-repository")
        ;; save bookmarks
        (setq-default bm-buffer-persistence t)
        ;; Saving bookmarks
        (add-hook 'kill-buffer-hook #'bm-buffer-save)
        ;; Saving the repository to file when on exit.
        ;; kill-buffer-hook is not called when Emacs is killed, so we
        ;; must save all bookmarks first.
        (add-hook 'kill-emacs-hook #'(lambda nil
                                          (bm-buffer-save-all)
                                          (bm-repository-save)))
        ;; The `after-save-hook' is not necessary to use to achieve persistence,
        ;; but it makes the bookmark data in repository more in sync with the file
        ;; state.
        (add-hook 'after-save-hook #'bm-buffer-save)

        ;; Restoring bookmarks
        (add-hook 'find-file-hooks   #'bm-buffer-restore)
        (add-hook 'after-revert-hook #'bm-buffer-restore)

        :bind (("C-b" . bm-toggle)
               ("<C-down>" . bm-next)
               ("<C-up>" . bm-previous))
        )
    #+END_SRC

*** flycheck
    #+BEGIN_SRC  emacs-lisp
      (use-package flycheck
        :ensure t
        :init
        (add-hook 'after-init-hook #'global-flycheck-mode)
        (add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++17"))))

      ;; from https://typescript-eslint.io/getting-started
      ;;
      ;; install these npm packages locally first
      ;; $ npm install --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint typescript
      ;;
      ;; in .eslintrc.cjs
      ;;
      ;; module.exports = {
      ;;   extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended'],
      ;;   parser: '@typescript-eslint/parser',
      ;;   plugins: ['@typescript-eslint'],
      ;;   root: true,
      ;; };
      ;;
      ;; or $ npx eslint --init
      ;;
      ;; then use local eslint from node_modules before global
      ;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
      (defun my/use-eslint-from-node-modules ()
        (let* ((root (locate-dominating-file
                      (or (buffer-file-name) default-directory)
                      "node_modules"))
               (eslint (and root
                            (expand-file-name "node_modules/eslint/bin/eslint.js"
                                              root))))
          (when (and eslint (file-executable-p eslint))
            (setq-local flycheck-javascript-eslint-executable eslint))))
      (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
    #+END_SRC

*** hydra
    #+BEGIN_SRC  emacs-lisp
      (use-package hydra
        :ensure t
        :init
        (setq zoom-window-mode-line-color "DarkGreen")
        )
    #+END_SRC

*** magit
    #+BEGIN_SRC  emacs-lisp
      (use-package magit
        :ensure t
        :bind (("C-x g" . magit-status)))
    #+END_SRC

*** org-bullets
    #+BEGIN_SRC  emacs-lisp
      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** projectile
    #+BEGIN_SRC  emacs-lisp
      (use-package projectile
        :ensure t
        :config
        (projectile-mode +1)
        )
    #+END_SRC

*** which-key
    #+BEGIN_SRC  emacs-lisp
      (use-package which-key
        :ensure t
        :config (which-key-mode))
    #+END_SRC

* Typescript && react
   #+BEGIN_SRC  emacs-lisp
     ;;(use-package web-mode
     ;;  :ensure t
     ;;  :mode (("\\.html?\\'" . web-mode)
     ;;         ("\\.tsx\\'" . web-mode)
     ;;         ("\\.jsx\\'" . web-mode))
     ;;  :config
     ;;  (setq web-mode-markup-indent-offset 2
     ;;        web-mode-css-indent-offset 2
     ;;        web-mode-code-indent-offset 2
     ;;        web-mode-block-padding 2
     ;;        web-mode-comment-style 2
     ;;
     ;;        web-mode-enable-css-colorization t
     ;;        web-mode-enable-auto-pairing t
     ;;        web-mode-enable-comment-keywords t
     ;;        web-mode-enable-current-element-highlight t
     ;;        )
     ;;  (add-hook 'web-mode-hook
     ;;            (lambda ()
     ;;              (when (string-equal "tsx" (file-name-extension buffer-file-name))
     ;;		(setup-tide-mode))))
     ;;  (flycheck-add-mode 'typescript-tslint 'web-mode))

     (defun setup-tide-mode ()
       (interactive)
       (tide-setup)
       (flycheck-mode +1)
       (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (eldoc-mode +1)
       (tide-hl-identifier-mode +1)
       ;; company is an optional dependency. You have to
       ;; install it separately via package-install
       ;; `M-x package-install [ret] company`
       (company-mode +1))

     (use-package typescript-mode
       :ensure t
       :config
       (setq typescript-indent-level 2)
       (add-hook 'typescript-mode #'subword-mode))

     (use-package tide
       :ensure t
       :after (typescript-mode company flycheck)
       :hook ((typescript-mode . tide-setup)
	      (typescript-mode . tide-hl-identifier-mode)
	      (before-save . tide-format-before-save)))

     (use-package js2-mode
       :ensure t)
     (add-hook 'js2-mode-hook #'setup-tide-mode)
     ;;(flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
     (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

   #+END_SRC

* Docker
   #+BEGIN_SRC  emacs-lisp
     (use-package dockerfile-mode
       :ensure t
       )
     (use-package docker-compose-mode
       :ensure t
       )
   #+END_SRC

* Markdown
   #+BEGIN_SRC  emacs-lisp
     (use-package markdown-mode
       :ensure t
       :mode ("README\\.md\\'" . gfm-mode)
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC

* Rust
   #+BEGIN_SRC  emacs-lisp
     (use-package rustic
       :ensure t
       )
   #+END_SRC

* Kotlin
   #+BEGIN_SRC  emacs-lisp
     (use-package kotlin-mode
       :ensure t
       :hook
       (kotlin-mode . lsp)
       )
   #+END_SRC

* LSP
   #+BEGIN_SRC  emacs-lisp
     (use-package lsp-mode
       :ensure
       :commands lsp
       :custom
       ;; what to use when checking on-save. "check" is default, I prefer clippy
       (lsp-rust-analyzer-cargo-watch-command "clippy")
       (lsp-eldoc-render-all t)
       (lsp-idle-delay 0.6)
       ;; enable / disable the hints as you prefer:
       (lsp-rust-analyzer-server-display-inlay-hints t)
       (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
       (lsp-rust-analyzer-display-chaining-hints t)
       (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
       (lsp-rust-analyzer-display-closure-return-type-hints t)
       (lsp-rust-analyzer-display-parameter-hints nil)
       (lsp-rust-analyzer-display-reborrow-hints nil)
       :config
       (add-hook 'lsp-mode-hook 'lsp-ui-mode)
       (add-hook 'typescript-mode-hook 'lsp-deferred)
       (add-hook 'javascript-mode-hook 'lsp-deferred)
       (add-hook 'js2-mode-hook 'lsp-deferred)
       (add-hook 'c-mode-hook 'lsp)
       (add-hook 'c++-mode-hook 'lsp)
       :hook
        ((python-mode . lsp))
       )
     (use-package lsp-ui
       :ensure
       :commands lsp-ui-mode
       :custom
       (lsp-ui-peek-always-show t)
       ; sideline show is disabled due to weird font size that mangles rust src view
       (lsp-ui-sideline-show-hover nil)
       (lsp-ui-doc-enable nil))
   #+END_SRC

* Bazel
   #+BEGIN_SRC  emacs-lisp
     (use-package bazel
       :ensure t
       )
   #+END_SRC

* Hydra defs
** Hydra multi cursors
   #+BEGIN_SRC emacs-lisp
     (defhydra multiple-cursors-hydra (:hint nil)
       "
              ^Up^            ^Down^        ^Other^
         ----------------------------------------------
         [_p_]   Prev    [_n_]   Next    [_l_] Edit lines
         [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
         [_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
         ^ ^             ^ ^             [_q_] Quit
         "
       ("l" mc/edit-lines :exit t)
       ("a" mc/mark-all-like-this :exit t)
       ("n" mc/mark-next-like-this)
       ("N" mc/skip-to-next-like-this)
       ("M-n" mc/unmark-next-like-this)
       ("p" mc/mark-previous-like-this)
       ("P" mc/skip-to-previous-like-this)
       ("M-p" mc/unmark-previous-like-this)
       ("r" mc/mark-all-in-region-regexp :exit t)
       ("q" nil))
   #+END_SRC

** Hydra projectile
   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-projectile-other-window (:color teal)
       "projectile-other-window"
       ("f"  projectile-find-file-other-window        "file")
       ("g"  projectile-find-file-dwim-other-window   "file dwim")
       ("d"  projectile-find-dir-other-window         "dir")
       ("b"  projectile-switch-to-buffer-other-window "buffer")
       ("q"  nil                                      "cancel" :color blue))

     (defhydra hydra-projectile (:color teal :hint nil)
       "
          PROJECTILE: %(projectile-project-root)

          Find File           Search/Tags          Buffers                Cache
     ------------------------------------------------------------------------------------------
     _s-f_: file           _a_: ag                _b_: switch to buffer  _c_: cache clear
      _ff_: file dwim      _g_: update gtags    _s-k_: Kill all buffers  _x_: remove known project
      _fd_: file curr dir  _o_: multi-occur       _X_: cleanup non-existing
       _r_: recent file                                               ^^^^_z_: cache current
       _d_: dir

     "
       ("a"   helm-projectile-ag)
       ("b"   helm-projectile-switch-to-buffer)
       ("c"   projectile-invalidate-cache)
       ("d"   projectile-find-dir)
       ("s-f" helm-projectile-find-file)
       ("ff"  projectile-find-file-dwim)
       ("fd"  projectile-find-file-in-directory)
       ("g"   ggtags-update-tags)
       ("s-g" ggtags-update-tags)
       ("K"   projectile-kill-buffers)
       ("s-k" projectile-kill-buffers)
       ("m"   projectile-multi-occur)
       ("o"   projectile-multi-occur)
       ("p"   helm-projectile "project")
       ("s"   projectile-switch-project "switch prj")
       ("r"   projectile-recentf)
       ("x"   projectile-remove-known-project)
       ("X"   projectile-cleanup-known-projects)
       ("z"   projectile-cache-current-file)
       ("`"   hydra-projectile-other-window/body "other window")
       ("q"   nil "cancel" :color blue))
   #+END_SRC


** Hydra expand region
  #+BEGIN_SRC emacs-lisp
    (defhydra expand-copy (global-map "C-c r")
      "Region"
      ("j" er/expand-region "expend")
      ("k" er/contract-region "contract")
      ("q" nil "quit")
      ("c" copy-region-as-kill "copy" :exit t)
      ("r" copy-to-register "copy to reg" :exit t))
  #+END_SRC

** Hydra helm-ag
  #+BEGIN_SRC emacs-lisp
    (defhydra ag (global-map "C-c a" :hint nil)
      "Helm ag "
      ("a" helm-do-ag :exit t)
      ("b" helm-do-ag-buffers :exit t)
      ("r" helm-projectile-ag :exit t)
      ("f" helm-do-ag-this-file :exit t)
      ("c" helm-ag-clear-stack :exit t)
      ("p" helm-ag-pop-stack :exit t)
      ("P" helm-do-ag-project-root :exit t)
      ("q" nil))
  #+END_SRC

** Hydra system commands
  #+BEGIN_SRC emacs-lisp
    (defhydra system (global-map "C-c s" :hint nil)
      "system "
      ("b" compile :exit t)
      ("t" vterm :exit t)
      ("q" nil))
  #+END_SRC

* Behavior configs
  - alias y to yes and n to no
    #+BEGIN_SRC emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

  - use vertical splitting in ediff
    #+BEGIN_SRC emacs-lisp
      (setq ediff-split-window-function (lambda (&optional arg)
                                          (if (> (frame-width) 150)
                                              (split-window-horizontally arg)
                                            (split-window-vertically arg))))
    #+END_SRC

  - quit ediff immediately
    #+BEGIN_SRC emacs-lisp
      (defun disable-y-or-n-p (orig-fun &rest args)
        (cl-letf (((symbol-function 'y-or-n-p) (lambda (prompt) t)))
          (apply orig-fun args)))
      (advice-add 'ediff-quit :around #'disable-y-or-n-p)
    #+END_SRC

  - define tab behavior
    #+BEGIN_SRC emacs-lisp
      (define-key text-mode-map (kbd "TAB") 'self-insert-command)
      (setq-default c-basic-offset 4)
    #+END_SRC

* Mode hooks
** system hooks
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'turn-off-auto-fill)
     (add-hook 'org-mode-hook 'turn-off-auto-fill)

     (add-hook 'org-mode-hook
               (lambda()
                 (setq-default fill-column 90)))
   #+END_SRC

** programming hooks
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'hs-minor-mode)
     (add-hook 'prog-mode-hook 'whitespace-mode)
     ;;(add-hook 'c-mode-hook 'my-c-mode-config)
     ;;(add-hook 'c-mode-hook
     ;;          (lambda ()
     ;;            (c-add-style "linux-kernel"
     ;;                         '("linux" (c-offsets-alist
     ;;                                    (arglist-cont-nonempty
     ;;                                     c-lineup-gcc-asm-reg
     ;;                                     linux-kernel-coding-style/c-lineup-arglist-tabs-only))))))
     ;;(add-hook 'c-mode-hook 'linux-kernel-coding-style/setup)
     ;;(add-hook 'c++-mode-hook 'helm-gtags-mode)
     ;;(add-hook 'c++-mode-hook 'my-c++-mode-config)

     (add-hook 'makefile-mode-hook
               (lambda()
                 (setq-default fill-column 75)))
   #+END_SRC

** background hooks
   #+BEGIN_SRC emacs-lisp
    (defun set-background-for-terminal (&optional frame)
      (or frame (setq frame (selected-frame)))
      "unsets the background color in terminal mode"
      (unless (display-graphic-p frame)
        (set-face-background 'default "unspecified-bg" frame)))
    (add-hook 'after-make-frame-functions 'set-background-for-terminal)
    (add-hook 'window-setup-hook 'set-background-for-terminal)
   #+END_SRC

* Keys: Global
  ;;(unbind-key "C-t" dired-mode-map)
  #+BEGIN_SRC emacs-lisp
  (bind-key "C-c p" 'hydra-projectile/body)
  (bind-key "M-g" 'goto-line)
  (bind-key "<M-left>" 'windmove-left)
  (bind-key "<M-right>" 'windmove-right)
  (bind-key "<M-up>" 'windmove-up)
  (bind-key "<M-down>" 'windmove-down)
  (bind-key "<M-S-left>" 'shrink-window-horizontally)
  (bind-key "<M-S-right>" 'enlarge-window-horizontally)
  (bind-key "<M-S-down>" 'shrink-window)
  (bind-key "<M-S-up>" 'enlarge-window)
  (bind-key "C-x b" 'helm-mini)
  (bind-key "C-x v" 'view-file)
  (bind-key "C-c e" 'switch-to-scratch)
  (bind-key "C-c C-e" 'eldoc-doc-buffer)
  (bind-key "C-c m" 'multiple-cursors-hydra/body)
  (bind-key "C-x 3" 'split-and-follow-vertically)
  (bind-key "C-x 2" 'split-and-follow-horizontally)
  (bind-key "C-c k w" 'kill-whole-word)
  (bind-key "C-c k l" 'kill-whole-line)
  (bind-key "C-c c l" 'copy-whole-line)
  (bind-key "C-x k" 'kill-curr-buffer)
  #+END_SRC

* Keys: Mode specifics
  #+BEGIN_SRC emacs-lisp
  (unbind-key "M-<up>" org-mode-map)
  (unbind-key "M-<down>" org-mode-map)
  (unbind-key "M-<left>" org-mode-map)
  (unbind-key "M-<right>" org-mode-map)
  ;(unbind-key "C-v" term-raw-map)
  #+END_SRC

* Mouse settings
  #+BEGIN_SRC emacs-lisp
  ;; mouse button one drags the scroll bar
  (define-key global-map [vertical-scroll-bar down-mouse-1] 'scroll-bar-drag)

  ;; setup scroll mouse settings
  (defun up-slightly () (interactive) (scroll-up 5))
  (defun down-slightly () (interactive) (scroll-down 5))
  (define-key global-map [mouse-4] 'down-slightly)
  (define-key global-map [mouse-5] 'up-slightly)

  (defun up-one () (interactive) (scroll-up 1))
  (defun down-one () (interactive) (scroll-down 1))
  (define-key global-map [S-mouse-4] 'down-one)
  (define-key global-map [S-mouse-5] 'up-one)

  (defun up-a-lot () (interactive) (scroll-up))
  (defun down-a-lot () (interactive) (scroll-down))
  (define-key global-map [C-mouse-4] 'down-a-lot)
  (define-key global-map [C-mouse-5] 'up-a-lot)
  #+END_SRC

* ETC
  #+BEGIN_SRC emacs-lisp
    ;;keep cursor at same position when scrolling
    ;;scroll window up/down by one line
    (setq scroll-preserve-screen-position 1)

    (global-hl-line-mode t)
    (global-auto-revert-mode 1)
    (setq auto-revert-verbose nil)
    (setq save-interprogram-paste-before-kill t)
    (add-to-list 'org-structure-template-alist
    '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

    ;; Save whatever’s in the current (system) clipboard before
    ;; replacing it with the Emacs’ text.
    (setq save-interprogram-paste-before-kill t)
    (setq mouse-drag-copy-region t)

    ;; meaningful names for buffers with the same name
    (setq uniquify-buffer-name-style 'forward)
    (setq uniquify-separator "/")
    (setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
    (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers

    ;; remove scrollbar
    (scroll-bar-mode -1)

    ;; setup user home directory to use custom lisp package
    ;;(defvar use-home)
    ;;(setq use-home (concat (expand-file-name "~/.emacs.d") "/"))
    ;;(setq load-path (append (list (concat use-home "lisp")

  #+END_SRC

* Custom settings 
  #+BEGIN_SRC emacs-lisp
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(auto-save-default nil)
     '(blink-cursor-mode nil)
     '(column-number-mode t)
     '(company-dabbrev-code-ignore-case t)
     '(company-quickhelp-mode t)
     '(current-language-environment "UTF-8")
     '(delete-selection-mode t)
     '(desktop-save-mode t)
     '(dired-listing-switches "-al --group-directories-first")
     '(display-time-mode t)
     '(ediff-split-window-function
       (lambda
         (&optional arg)
         (if
             (>
              (frame-width)
              150)
             (split-window-horizontally arg)
           (split-window-vertically arg))) t)
     '(ediff-window-setup-function (quote ediff-setup-windows-plain))
     '(elscreen-default-buffer-name "new_elscreen")
     '(elscreen-display-tab nil)
     '(elscreen-tab-display-control nil)
     '(fill-column 80)
     '(frame-title-format "emacs - %b" t)
     '(global-company-mode t)
     '(global-flycheck-mode t)
     '(global-visual-line-mode t)
     '(indent-tabs-mode nil)
     '(inhibit-startup-screen t)
     '(isearch-highlight t)
     '(magit-log-section-arguments (quote ("--graph" "--color" "--decorate" "-n32")))
     '(make-backup-files nil)
     '(menu-bar-mode nil)
     '(next-line-add-newlines nil)
     '(package-enable-at-startup nil)
     '(projectile-completion-system (quote helm))
     '(projectile-mode t nil (projectile))
     '(projectile-switch-project-action (quote helm-projectile-switch-to-buffer))
     '(projectile-tags-backend (quote find-tag))
     '(projectile-tags-command "")
     '(projectile-tags-file-name "")
     '(query-replace-highlight t)
     '(scroll-conservatively 1)
     '(scroll-preserve-screen-position t)
     '(scroll-step 1)
     '(show-paren-mode t)
     '(show-paren-style (quote expression))
     '(tab-width 4)
     '(tool-bar-mode nil)
     '(whitespace-style
       (quote
        (face trailing tabs spaces lines lines-tail empty indentation::tab indentation::space indentation tab-mark)))
     '(x-select-enable-clipboard-manager t))
    ;;(custom-set-faces
    ;; ;; custom-set-faces was added by Custom.
    ;; ;; If you edit it by hand, you could mess it up, so be careful.
    ;; ;; Your init file should contain only one such instance.
    ;; ;; If there is more than one, they won't work right.
    ;; '(default ((t (:family "DejaVu Sans Mono" :foundry "PfEd" :slant normal :weight normal :height 120 :width normal))))
    ;; '(vertical-border ((t (:background "#454545" :foreground "dim gray")))))
  #+END_SRC

* Additional setting files
  maybe company specific settings in a file?
  #+BEGIN_SRC emacs-lisp
    ;; (load-if-exists "~/.emacs.d/company.el")
  #+END_SRC
* Custom file type binding to mode
  this should be put at the end. some packages overrides auto-mode-alist
  #+BEGIN_SRC emacs-lisp
    (setq auto-mode-alist
      (append
       ;; File name ends in `.C'.
       '(
         (".*/kernel/.*\\.h\\'" . c-mode)
         (".*/prg/c/.*\\.h\\'" . c-mode)
         ("\\.c\\'" . c-mode)
         ("\\.h\\'" . c++-mode)
         ("\\.cpp\\'" . c++-mode)
         ("\\.cc\\'" . c++-mode)
         ("\\.tpp\\'" . c++-mode)
         ("\\.org\\'" . org-mode)
         ("\\.txt\\'" . org-mode)
         ) auto-mode-alist))
  #+END_SRC

* Emacs Infos
** emacs general
   http://planet.emacsen.org/
   http://sachachua.com/blog/category/geek/emacs/

** use package
   https://github.com/jwiegley/use-package

** tips on how to
   <s + tab expands to #+BEGIN.. 
   then, put "emacs-lisp"
   C-c ' is for indentation for configuration

** old packages
   helm-git-grep: helm for git grep, an incremental git-grep(1)
   helm-ls-git: list git files.
   rtags + irony + company irony
   elpy: Emacs Python Development 
   navi-mode: super fast org mode search & editing

   spaceline & powerline would be enabled in the future.

** something interesting
    web-mode for html editing
    better-shell: remote open shell and edit. tramp + shell

** how to address performance issue
   - Option 1: Disable modes: Start disabling those minor-modes you've listed, and see
     which one solves you performance issue. I would start with smartparens,
     auto-complete, line-number and font-lock, and then follow down the list.

     If none of the minor-modes fix your issue, then start commenting out portions of your
     init file until you find out which snippet was causing this. In any case, ask a new
     question when you have something more specific.

   - Option 2: The profiler: Invoke M-x profiler-start RET RET (the second RET is to
     confirm cpu); Do some typing, preferably an entire paragraph or more; Invoke M-x
     profiler-report.  That will give you a buffer describing the cpu time taken by each
     function. Hitting TAB on a line expands it to display the functions inside
     it. Navigate this buffer until you find out which function is taking so much CPU
     time.

     What do I do afterwards?  Once you find the function or package or snippet causing
     lag you can (in no particular order):

     Ask a new question here regarding that specific minor-mode (or function or snippet).
     Report a bug to the package maintainer.  Check the comments at the top of the
     package's source file. If it contains a URL (specially on github), there's probably
     an issue tracker there.  Some packages offer a command like M-x PACKAGE-bug-report.
     His or her email should be at the top of the package's source file.  If it's a
     built-in package, you can report it with M-x report-emacs-bug.  Even for packages
     that are not built-in, you can ask for help at the help-gnu-emacs mailing list.


* Packages not used
** eshell
   cd /USER@PUTTYCONFIG:/some/path
   #+BEGIN_SRC emacs-lisp
   ;;  (load-if-exists "~/.emacs.d/eshell/eshell_settings.el")
   #+END_SRC

** rtags
   #+BEGIN_SRC emacs-lisp
     ;(use-package rtags
     ;  :ensure t
     ;  :after company-rtags
     ;  :config
     ;  (rtags-enable-standard-keybindings)
     ;  (setq rtags-autostart-diagnostics t)
     ;  (push 'company-rtags company-backends)
     ;  ;;(define-key c-mode-base-map (kbd "<C-tab>") (function company-complete))
     ;  (bind-keys :map c-mode-base-map ([C-tab] . company-complete))
     ;
     ;  ;; for realgud
     ;  ;; in emacs, M-x load-library realgud
     ;
     ;  (add-hook 'c-mode-common-hook 'rtags-start-process-unless-running)
     ;  (add-hook 'c++-mode-common-hook 'rtags-start-process-unless-running)
     ;
     ;  :bind
     ;  ([remap xref-find-definitions] . rtags-find-symbol-at-point)
     ;  ([remap xref-pop-marker-stack] . rtags-location-stack-back)
     ;  )
     ;(use-package helm-rtags
     ;  :ensure t)
     ;(use-package company-rtags
     ;  :ensure t)
   #+END_SRC

** rustic
   #+BEGIN_SRC emacs-lisp
     ;;(use-package rustic
     ;;  :ensure t)
   #+END_SRC

** jinja2
   #+BEGIN_SRC emacs-lisp
   ;  (use-package jinja2-mode
   ;    :ensure t)
   #+END_SRC

** elpy
   #+BEGIN_SRC  emacs-lisp
   ;  (use-package elpy
   ;    :ensure t
   ;    :config
   ;    (elpy-enable)
   ;    (unbind-key "M-<up>" elpy-mode-map)
   ;    (unbind-key "M-<down>" elpy-mode-map)
   ;    (unbind-key "M-<left>" elpy-mode-map)
   ;    (unbind-key "M-<right>" elpy-mode-map)
   ;    )
   #+END_SRC

** hungry-delete
   #+BEGIN_SRC  emacs-lisp
    ;(use-package hungry-delete
    ;  :ensure t
    ;  :config
    ;  (global-hungry-delete-mode))
   #+END_SRC


** tramp
   #+BEGIN_SRC emacs-lisp
     ;(use-package tramp
     ;  :ensure t
     ;  :config
     ;  (setq tramp-default-method "scp")
     ;  (setq shell-prompt-pattern ":")
     ;  )
   #+END_SRC


** helm-tramp
   https://github.com/masasam/emacs-helm-tramp
   global-aggressive-indent-mode && editorconfig-mode needs to be disabled

   #+BEGIN_SRC  emacs-lisp
     ;(use-package helm-tramp
     ;  :ensure t
     ;  :init
     ;  (setq tramp-default-method "scp")
     ;  (setq helm-tramp-localhost-directory "/root")
     ;  (add-hook 'helm-tramp-pre-command-hook '(lambda () 
     ;                                            (projectile-mode 0)))
     ;  (add-hook 'helm-tramp-quit-hook '(lambda ()
     ;                                     (projectile-mode 1)))
     ;  )
   #+END_SRC

** with-editor
   #+BEGIN_SRC  emacs-lisp
    ; (use-package with-editor
    ;   :ensure t)
   #+END_SRC

** powerline: disabled due to perf issue
   #+BEGIN_SRC  emacs-lisp
     ;;(use-package powerline
     ;;  :ensure t)
     ;;  ;;:config (powerline-default-theme))
   #+END_SRC
** spaceline: disabled due to perf issue
   #+BEGIN_SRC  emacs-lisp
     ;;(use-package spaceline
     ;;  :ensure t
     ;;  :config 
     ;;  (spaceline-emacs-theme)
     ;;  (spaceline-toggle-projectile-root-off)
     ;;  )
   #+END_SRC

** modern-cpp-font-lock
   #+BEGIN_SRC  emacs-lisp
     ;;(use-package modern-cpp-font-lock
     ;;  :ensure t
     ;;  :init
     ;;  (modern-c++-font-lock-global-mode))
   #+END_SRC

** dired-recent
   #+BEGIN_SRC  emacs-lisp
     ;;(use-package dired-recent
     ;;  :ensure t
     ;;  :config (dired-recent-mode)
     ;;  )
   #+END_SRC

** dired-subtree
   #+BEGIN_SRC  emacs-lisp
     ;;(use-package dired-subtree
     ;;  :ensure t
     ;;  :bind (:map dired-mode-map
     ;;              ("q" . kill-this-buffer)
     ;;              ("i" . dired-subtree-toggle)
     ;;              ("C-M-u" . dired-subtree-up)
     ;;              ("C-M-d" . dired-subtree-down)
     ;;              ))
   #+END_SRC

** switch-window
   #+BEGIN_SRC emacs-lisp
     ;;(use-package switch-window
     ;;  :ensure t
     ;;  :config
     ;;  (setq switch-window-input-style 'minibuffer)
     ;;  (setq switch-window-increase 4)
     ;;  (setq switch-window-threshold 2)
     ;;  (setq switch-window-shortcut-style 'qwerty)
     ;;  (setq switch-window-qwerty-shortcuts
     ;;        '("a" "s" "d" "f" "h" "j" "k" "l"))
     ;;  :bind
     ;;  ([remap other-window] . switch-window))
   #+END_SRC

** helm-gtags
   #+BEGIN_SRC  emacs-lisp
     ;;(use-package helm-gtags
     ;;  :ensure t
     ;;  :init
     ;;  (setq
     ;;   helm-gtags-ignore-case t
     ;;   helm-gtags-auto-update t
     ;;   helm-gtags-use-input-at-cursor t
     ;;   helm-gtags-pulse-at-cursor t
     ;;   helm-gtags-suggested-key-mapping t))
   #+END_SRC

** helm-elscreen
   #+BEGIN_SRC  emacs-lisp
     ;;(use-package helm-elscreen
     ;;  :ensure t
     ;;  :bind (("C-z h" . helm-elscreen)))
   #+END_SRC
   
